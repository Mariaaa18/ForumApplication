@page "/CreatePost"

@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using global::Shared.DTOs
@inject IPostService postService
@inject NavigationManager navMgr
@attribute [Authorize]
<h3>CreatePost</h3>


<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div class="form-group field">
        <label>Body:</label>
        <input type="text" @bind="postBody"/>
    </div>
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    @*
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private bool isLoggedIn;
    private string postTitle = "";
    private string postBody="";
   
    
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        name = user.Identity!.Name!;
    }

    
    private async Task Create()
    {
        msg = "";
        
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new(name,postTitle,postBody );
            await postService.CreateAsync(dto);
            postTitle = "";
            postBody="";
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }*@
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? Username;
    private bool isLoggedIn;
    private string postTitle = "";
    private string postBody = "";
    private string showModal="";

    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        Username = user.Identity!.Name!;
    }
    
    private async Task Create()
    {
        msg = "";

        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            
            PostCreationDto dto = new(Username, postTitle,postBody);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}